generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Region {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  regionId Int
  region   Region    @relation(fields: [regionId], references: [id])
  listings Listing[]
}

model ListingType {
  id       Int       @id @default(autoincrement())
  name     String
  value    String
  listings Listing[]
}

model Amenity {
  id       Int              @id @default(autoincrement())
  name     String
  value    String
  listings ListingAmenity[]
}

model ListingAmenity {
  listingId Int
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([listingId, amenityId])
}

model Food {
  id       Int           @id @default(autoincrement())
  name     String
  value    String
  listings ListingFood[]
}

model ListingFood {
  listingId Int
  foodId    Int
  food      Food    @relation(fields: [foodId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([listingId, foodId])
}

model Listing {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  minPrice     Int
  cityId       Int
  typeId       Int
  address      String           @default("Не указан")
  places       Int?             @default(2)
  badCount     Int?             @default(1)
  minDaysOrder Int              @default(3)
  seaDistance  Int
  area         Int?
  floor        Int?
  maxFloor     Int?
  elevator     Boolean?
  phoneRaw     String
  phone        String
  renterName   String
  createdAt    DateTime         @default(now())
  note         String?
  bookings     Booking[]
  coords       Coords?
  type         ListingType      @relation(fields: [typeId], references: [id])
  city         City             @relation(fields: [cityId], references: [id])
  amenities    ListingAmenity[]
  food         ListingFood[]
  photos       Photo[]
  pricePeriods PricePeriod[]
  reviews      Review[]
  rooms        Room[]
}

model Coords {
  id        Int     @id @default(autoincrement())
  longitude Float
  width     Float
  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Photo {
  id        Int      @id @default(autoincrement())
  urlMin    String
  urlFull   String
  listingId Int?
  roomId    Int?
  position  Int?     @default(2)
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Room {
  id           Int           @id @default(autoincrement())
  listingId    Int
  name         String
  places       Int
  area         Int
  badCount     Int           @default(1)
  minPrice     Int
  Booking      Booking[]
  photos       Photo[]
  pricePeriods PricePeriod[]
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenities    RoomAmenity[]
}

model RoomAmenity {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model PricePeriod {
  id        Int      @id @default(autoincrement())
  price     Int
  startDate DateTime
  endDate   DateTime
  listingId Int?
  roomId    Int?
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Booking {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  adults          Int
  childrens       Int
  surname         String
  name            String
  comment         String
  phone           String
  transfer        Boolean
  transferComment String?
  listingId       Int
  roomId          Int?
  userId          Int?
  totalPrice      Int?
  prepay          Int?
  createdAt       DateTime @default(now())
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  room            Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  listing         Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model User {
  id         Int       @id @default(autoincrement())
  name       String?
  surname    String?
  patronymic String?
  userFrom   String?
  phoneRaw   String    @unique
  phone      String    @unique
  createdAt  DateTime  @default(now())
  bookings   Booking[]
  reviews    Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String?
  rating    Int
  listingId Int
  userId    Int?
  userName  String?
  userFrom  String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Admin {
  id           Int      @id @default(autoincrement())
  login        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
}

model SmsCode {
  id        Int      @id @default(autoincrement())
  userPhone String   @unique
  otp       Int
  createdAt DateTime @default(now())
}
