generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Region {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  regionId Int
  slug     String    @unique
  region   Region    @relation(fields: [regionId], references: [id])
  listings Listing[]
  seoPages SeoPage[]

  @@unique([id, slug])
}

model SeoPage {
  id            Int          @id @default(autoincrement())
  path          String
  photoUrl      String       @default("/seo/listing-type.jpg")
  smallTitle    String?
  title         String
  description   String
  lastModified  DateTime     @updatedAt
  priority      Float        @default(0.8)
  changefreq    String       @default("monthly")
  isIndexable   Boolean      @default(true)
  cityId        Int?
  listingTypeId Int?
  ListingType   ListingType? @relation(fields: [listingTypeId], references: [id])
  city          City?        @relation(fields: [cityId], references: [id])
}

model ListingType {
  id       Int       @id @default(autoincrement())
  name     String
  value    String
  listings Listing[]
  seoPages SeoPage[]
}

model Amenity {
  id       Int              @id @default(autoincrement())
  name     String
  value    String
  listings ListingAmenity[]
}

model ListingAmenity {
  listingId Int
  amenityId Int
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([listingId, amenityId])
}

model Food {
  id       Int           @id @default(autoincrement())
  name     String
  value    String
  listings ListingFood[]
}

model ListingFood {
  listingId Int
  foodId    Int
  food      Food    @relation(fields: [foodId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([listingId, foodId])
}

model Listing {
  id           Int      @id @default(autoincrement())
  validated    Boolean  @default(true)
  title        String
  description  String
  minPrice     Int
  address      String   @default("Не указан")
  places       Int      @default(2)
  badCount     Int      @default(1)
  minDaysOrder Int      @default(3)
  seaDistance  Int
  area         Int?
  ownerId      Int?
  managerId    Int?
  createdAt    DateTime @default(now())
  note         String?
  typeId       Int

  bookings       Booking[]
  coords         Coords?
  flatProperties FlatProperties?
  city           City               @relation(fields: [cityId], references: [id])
  cityId         Int
  type           ListingType        @relation(fields: [typeId], references: [id])
  manager        User?              @relation("ManagerRelation", fields: [managerId], references: [id])
  owner          User?              @relation("OwnerRelation", fields: [ownerId], references: [id])
  amenities      ListingAmenity[]
  food           ListingFood[]
  statistics     ListingStatistic[]
  photos         Photo[]
  pricePeriods   PricePeriod[]
  reviews        Review[]
  rooms          Room[]
}

model FlatProperties {
  floor    Int
  maxFloor Int
  elevator Boolean
  flatId   Int     @unique
  flat     Listing @relation(fields: [flatId], references: [id], onDelete: Cascade)
}

model ListingStatistic {
  id        Int      @id @default(autoincrement())
  listingId Int
  date      DateTime @default(dbgenerated("CURRENT_DATE"))
  views     Int      @default(0)
  likes     Int      @default(0)
  favorites Int      @default(0)
  bookings  Int      @default(0)
  submits   Int      @default(0)
  revenue   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, date], name: "listingId_date")
}

model Coords {
  id        Int     @id @default(autoincrement())
  longitude Float
  width     Float
  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Photo {
  id        Int      @id @default(autoincrement())
  urlMin    String
  urlFull   String
  rotation  Int      @default(0)
  listingId Int?
  roomId    Int?
  position  Int?     @default(2)
  user      User?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Room {
  id           Int           @id @default(autoincrement())
  listingId    Int
  name         String
  places       Int
  area         Int
  badCount     Int           @default(1)
  minPrice     Int
  Booking      Booking[]
  photos       Photo[]
  pricePeriods PricePeriod[]
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenities    RoomAmenity[]
}

model RoomAmenity {
  id     Int    @id @default(autoincrement())
  name   String
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model PricePeriod {
  id         Int      @id @default(autoincrement())
  price      Int
  startDay   Int
  startMonth Int
  endDay     Int
  endMonth   Int
  listingId  Int?
  roomId     Int?
  room       Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  listing    Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Booking {
  id     Int    @id @default(autoincrement())
  status String

  userName    String
  userSurname String
  userPhone   String

  uuid String @unique

  bonusApplied      Boolean?
  bonusAppliedCount Int?

  totalPriceWithBonus Int?
  prepayWithBonus     Int?

  checkIn          DateTime
  checkOut         DateTime
  adults           Int
  childrens        Int
  comment          String?
  transfer         Boolean
  transferComment  String?
  daysCount        Int
  totalPrice       Int
  prepay           Int
  createdAt        DateTime          @default(now())
  isAdminCreated   Boolean           @default(false)
  roomId           Int?
  listingId        Int
  BonusTransaction BonusTransaction?
  listing          Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  room             Room?             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user             User?             @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  userId           Int?
  managedBy        User?             @relation("ManagedBookings", fields: [managerId], references: [id], onDelete: Cascade)
  managerId        Int?
}

model User {
  id                Int                @id @default(autoincrement())
  // Все роли: 'ADMIN', 'MANAGER', 'TOURIST', 'LANDLORD'
  role              String             @default("TOURIST")
  isTemporary       Boolean            @default(true)
  name              String
  surname           String?
  email             String?            @unique
  emailVerified     Boolean            @default(false)
  phone             String?
  vk_id             String?            @unique
  vk_token          String?
  bonusPoints       Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  BonusTransaction  BonusTransaction[]
  createdByAdmin    Boolean            @default(false)
  userBookings      Booking[]          @relation("UserBookings")
  manageredBookings Booking[]          @relation("ManagedBookings")

  telegram String?

  EmailVerificationCode EmailVerificationCode[]
  managerListings       Listing[]               @relation("ManagerRelation")
  ownerListings         Listing[]               @relation("OwnerRelation")
  avatar                Photo?                  @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  avatarId              Int?                    @unique
  reviews               Review[]
}

model EmailVerificationCode {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  code        String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
  attempts    Int      @default(0) // Количество попыток ввода кода
  lastAttempt DateTime @default(now()) // Время последней попытки
}

model BonusTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  bookingId   Int?     @unique
  amount      Int
  description String
  createdAt   DateTime @default(now())
  booking     Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              Int       @id @default(autoincrement())
  text            String
  rating          Int
  userName        String?
  isAdminCreated  Boolean   @default(false)
  createdAt       DateTime  @default(now())
  listingCheckIn  DateTime?
  listingCheckOut DateTime?
  userId          Int?
  listingId       Int
  listing         Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
