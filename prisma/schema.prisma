// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Region {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  regionId Int
  region   Region    @relation(fields: [regionId], references: [id])
  listings Listing[]
}

// тип объекта жилья
model ListingType {
  id       Int       @id @default(autoincrement())
  name     String
  value    String
  listings Listing[]
}

// удобавства
model Amenity {
  id       Int              @id @default(autoincrement())
  name     String
  value    String
  listings ListingAmenity[]
}

model ListingAmenity {
  listingId Int
  amenityId Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([listingId, amenityId])
}

model Food {
  id       Int           @id @default(autoincrement())
  name     String
  value    String
  listings ListingFood[]
}

model ListingFood {
  listingId Int
  foodId    Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  food      Food    @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@id([listingId, foodId])
}

// объект жилья
model Listing {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  minPrice     Int // Минимальная цена, если даты не указаны
  cityId       Int
  city         City             @relation(fields: [cityId], references: [id])
  typeId       Int
  type         ListingType      @relation(fields: [typeId], references: [id])
  amenities    ListingAmenity[]
  bookings     Booking[]
  reviews      Review[]
  rooms        Room[] // Связь с номерами для гостевых домов
  pricePeriods PricePeriod[]
  address      String           @default("Не указан")
  food         ListingFood[]
  photos       Photo[]
  places       Int?             @default(2)
  note         String?
  // Важно!!! Это на самом деле для количства комнат, ебал я такие миграции
  badCount     Int?             @default(1)
  //*********************

  minDaysOrder Int      @default(3)
  seaDistance  Int
  area         Int?
  coords       Coords?
  floor        Int?
  maxFloor     Int?
  elevator     Boolean?

  phoneRaw   String
  phone      String
  renterName String
  createdAt  DateTime @default(now())
}

model Coords {
  id Int @id @default(autoincrement())

  longitude Float
  width     Float

  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int     @unique
}

model Photo {
  id        Int      @id @default(autoincrement())
  urlMin    String
  urlFull   String
  position  Int?     @default(2)
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId Int?
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int?
}

model Room {
  id           Int           @id @default(autoincrement())
  listingId    Int
  listing      Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  name         String
  places       Int
  area         Int
  badCount     Int           @default(1)
  minPrice     Int
  pricePeriods PricePeriod[]
  Booking      Booking[]
  photos       Photo[]
  amenities    RoomAmenity[]
}

model RoomAmenity {
  id   Int    @id @default(autoincrement())
  name String

  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int
}

model PricePeriod {
  id        Int      @id @default(autoincrement())
  price     Int
  startDate DateTime
  endDate   DateTime
  listingId Int?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  roomId    Int?
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Booking {
  id              Int      @id @default(autoincrement())
  startDate       DateTime
  endDate         DateTime
  adults          Int
  childrens       Int
  surname         String
  name            String
  comment         String
  phone           String
  transfer        Boolean
  transferComment String?
  listingId       Int
  roomId          Int?
  listing         Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  room            Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId          Int?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalPrice Int?
  prepay     Int?

  createdAt DateTime @default(now())
}

model User {
  id         Int     @id @default(autoincrement())
  name       String?
  surname    String?
  patronymic String?
  userFrom   String?

  phoneRaw String    @unique
  phone    String    @unique
  bookings Booking[]
  reviews  Review[]

  createdAt DateTime @default(now())
}

model Review {
  id        Int     @id @default(autoincrement())
  comment   String?
  rating    Int
  listingId Int
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userName String?
  userFrom String?

  createdAt DateTime @default(now())
}

model Admin {
  id           Int    @id @default(autoincrement())
  login        String @unique
  passwordHash String

  createdAt DateTime @default(now())
}

model SmsCode {
  id        Int      @id @default(autoincrement())
  userPhone String   @unique
  otp       Int
  createdAt DateTime @default(now())
}
