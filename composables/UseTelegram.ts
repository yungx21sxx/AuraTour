import type {BookingCreateDTO} from "~/modules/Listing/types/dto.types";
import {parsePhoneNumber} from "libphonenumber-js";
import useBooking from "~/modules/Booking/composables/useBooking";

export default () => {
	const bookingBotToken = '7033762910:AAFQ-WgMN4uRWXl_ZQwn6snraEZyI1dR9eg';
	const bookingBotChatID = -1002065449939;
	const {
		beautifyDate,
	} = useBooking();

	function formatBookingMessageForTelegramLink(bookingData: BookingCreateDTO, listingLink: string, roomName: string | null, managerName: string) {
		const messageParts = [
			`–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:`,
			`**–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:** ${beautifyDate( bookingData.checkIn)}`,
			`**–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:** ${beautifyDate( bookingData.checkOut)}`,
			`–í–∑—Ä–æ—Å–ª—ã–µ: ${bookingData.adults}`,
			`–î–µ—Ç–∏: ${bookingData.childrens}`,
			`–§–∞–º–∏–ª–∏—è: ${bookingData.userSurname}`,
			`–ò–º—è: ${bookingData.userName}`,
			`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${bookingData.comment}`,
			`–¢–µ–ª–µ—Ñ–æ–Ω: ${parsePhoneNumber(bookingData.userPhone).formatNational()}`,
			`–¢—Ä–∞–Ω—Å—Ñ–µ—Ä: ${bookingData.transfer ? '–î–∞' : '–ù–µ—Ç'}`,
			bookingData.transferComment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É: ${bookingData.transferComment}` : '',
			`–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç: ${listingLink}  `,
			`–ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}`
		];

		// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
		return messageParts.filter(part => part !== '').join('%0A');
	}

	const getUrl = (text: string, token: string, chatID: number): string => `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatID}&text=${text}`
	// @ts-ignore

	// @ts-ignore
	const sendBookingInfo = async (bookingData: BookingCreateDTO, listingLink: string, roomName: string | null, managerName: string) => {
		const text = formatBookingMessageForTelegramLink(bookingData, listingLink, roomName, managerName);
		const url = getUrl(text, bookingBotToken, bookingBotChatID);
		return useFetch(url)
	}
	
	const sendListingValidationMassage = (type: 'create' | 'update', listingId: number) => {
		const text = `–û—Ç–µ–ª—å–µ—Ä –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ ${type === 'create' ? '—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∂–∏–ª—å—è' : '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–ª—å—è'}. –°—Å—ã–ª–∫–∞: https://aura-tour-abkhazia.ru/listing/${listingId}`;
		const url = getUrl(text, bookingBotToken, bookingBotChatID);
		return useFetch(url)
	}


	const fetchForCallData = async (phone: string, name: string, ) => {
		let text = `–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤: %0Aüë∂–ò–º—è: ${name} %0Aüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone} `
		const url = getUrl(text, bookingBotToken, bookingBotChatID);
		return useFetch(url)
	}

	return {
		sendBookingInfo,
		sendListingValidationMassage,
		fetchForCallData
	}

}